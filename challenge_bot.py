import os
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import sqlite3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('challenge.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            challenge_days INTEGER DEFAULT 21,
            current_day INTEGER DEFAULT 1,
            start_date TEXT
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS progress (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            date TEXT,
            sport INTEGER DEFAULT 0,
            study INTEGER DEFAULT 0,
            work INTEGER DEFAULT 0,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    
    conn.commit()
    conn.close()

# –§—Ä–∞–∑—ã –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
PHRASES = {
    'anytime': [
        "–°–ª—ã—à–∞–ª —Å–ª—É—Ö, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞. –ü—Ä–æ–≤–µ—Ä–∏–º?",
        "–ì–∞–ª–æ—á–∫–∏ —Å–∞–º–∏ —Å–µ–±—è –Ω–µ –ø–æ—Å—Ç–∞–≤—è—Ç! üí™",
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Ç—ã —Å–ø–æ—Å–æ–±–µ–Ω –Ω–∞ –±–æ–ª—å—à–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å.",
        "–ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Å–≤–æ—é —Ç—Ä–æ–π–Ω—É—é –∫–æ—Ä–æ–Ω—É! (–°–ø–æ—Ä—Ç, —É—á—ë–±–∞, —Ä–∞–±–æ—Ç–∞).",
        "–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–æ–ª—å—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º. –ö–∞–∫ —Ç–≤–æ–∏ —à–∞–≥–∏ —Å–µ–≥–æ–¥–Ω—è?"
    ],
    'lunch': [
        "–î–µ–Ω—å –≤ —Ä–∞–∑–≥–∞—Ä–µ! –û—Ç–ª–∏—á–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞—Ä—è–¥–∏—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º –∏–ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–µ—á–µ—Ä–Ω—é—é —É—á—ë–±—É.",
        "–ü–æ–ª–æ–≤–∏–Ω–∞ –¥–Ω—è –ø—Ä–æ—à–ª–∞. –î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫ –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç—Å—è —Ç–≤–æ–π —á–µ–ª–ª–µ–Ω–¥–∂?",
        "–û–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –æ–¥–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞. –°–ø–æ—Ä—Ç? –ò–ª–∏ –ø–∞—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —É—á—ë–±—ã?",
        "–ù–µ –∂–¥–∏ –≤–µ—á–µ—Ä–∞! –†–∞–∑–≥–æ–Ω–∏—Å—å —É–∂–µ —Å–µ–π—á–∞—Å, —á—Ç–æ–±—ã –≤–µ—á–µ—Ä–æ–º –±—ã—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–º.",
        "–£—Ç—Ä–µ–Ω–Ω—è—è —Ä—É—Ç–∏–Ω–∞ –ø–æ–∑–∞–¥–∏, –≤–µ—á–µ—Ä–Ω—è—è –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. –°–∞–º–æ–µ –≤—Ä–µ–º—è –≤–∫–ª–∏–Ω–∏—Ç—å —Ç—É–¥–∞ —Å–ø–æ—Ä—Ç –∏–ª–∏ 30 –º–∏–Ω—É—Ç —É—á—ë–±—ã!"
    ],
    'evening': [
        "–§–∏–Ω–∏—à–Ω–∞—è –ø—Ä—è–º–∞—è! 6 –≤–µ—á–µ—Ä–∞ ‚Äî –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã–≤–∞—Ç—å –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –ø—É–Ω–∫—Ç.",
        "–í–µ—á–µ—Ä ‚Äî —Ç–≤–æ—ë –≤—Ä–µ–º—è —Å–∏—è—Ç—å! –°–ø–æ—Ä—Ç, —É—á—ë–±–∞, —Ä–∞–±–æ—Ç–∞ ‚Äî —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–º –±—É–¥–µ—Ç?",
        "–£–∂–∏–Ω –ø–æ–¥–æ–∂–¥—ë—Ç? –°–Ω–∞—á–∞–ª–∞ ‚Äî –º–∞–ª–µ–Ω—å–∫–∞—è –ø–æ–±–µ–¥–∞ –≤ —á–µ–ª–ª–µ–Ω–¥–∂–µ!",
        "–¢–≤–æ–π —á–µ–ª–ª–µ–Ω–¥–∂ –µ—â—ë –Ω–µ –≤ –∫—É—Ä—Å–µ, —á—Ç–æ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –µ–≥–æ –∑–∞–±—Ä–æ—Å–∏—Ç—å. –ò—Å–ø—Ä–∞–≤–∏–º —ç—Ç–æ?",
        "–ò–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–ø–æ—Ä—Ç–∞, —á—Ç–æ–±—ã —Ä–∞–∑–≥–æ–Ω–∞—Ç—å —É—Å—Ç–∞–ª–æ—Å—Ç—å –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã!"
    ],
    'late': [
        "–Ø —Å–º–æ—Ç—Ä—é –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≤–∏–∂—É... –ø—É—Å—Ç–æ—Ç—É. –≠—Ç–æ –≥—Ä—É—Å—Ç–∏—Ç. üò¢",
        "–ö–∞–∂–µ—Ç—Å—è, —Ç–≤–æ–π —á–µ–ª–ª–µ–Ω–¥–∂ —Å–µ–≥–æ–¥–Ω—è –æ–±—ä—è–≤–∏–ª –≤—ã—Ö–æ–¥–Ω–æ–π –±–µ–∑ —Ç–≤–æ–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è.",
        "–Ø –≤–µ—Ä—é, —á—Ç–æ —Ç–≤–æ–∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª–∏—Å—å –≤ —Å—É–ø–µ—Ä—Å–∏–ª—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞. –ù–æ –ª—É—á—à–µ –±—ã –æ–Ω–∏ –ø—Ä–æ—Å—Ç–æ –±—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è.",
        "–≠–π, –∞ —á—Ç–æ —ç—Ç–æ —Ç–∞–º –∑–∞ —Ç—Ä–∏ –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ —Ç–≤–æ—ë–º –¥–Ω–µ? üëª",
        "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–≤—Ç—Ä–∞ —Ç—ã –±—É–¥–µ—à—å –∂–∞–ª–µ—Ç—å, —á—Ç–æ –Ω–µ –Ω–∞—á–∞–ª —Å–µ–≥–æ–¥–Ω—è. –ù–æ –µ—â—ë –Ω–µ –ø–æ–ª–Ω–æ—á—å! –ß—É–¥–µ—Å–∞ —Å–ª—É—á–∞—é—Ç—Å—è!",
        "–¢–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –î—É–æ–ª–∏–Ω–≥–æ-—Å–æ–≤–µ—Ç–Ω–∏–∫ –≤ —è—Ä–æ—Å—Ç–∏! –û–Ω –Ω–µ–¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω–æ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ —á–∞—Å—ã. ‚è∞"
    ]
}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    conn = sqlite3.connect('challenge.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT OR IGNORE INTO users (user_id, username, first_name) 
        VALUES (?, ?, ?)
    ''', (user_id, user.username, user.first_name))
    
    conn.commit()
    conn.close()
    
    welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üéØ

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∏ —Ç–≤–æ–∏–º –¥—Ä—É–∑—å—è–º –ø—Ä–æ–π—Ç–∏ —á–µ–ª–ª–µ–Ω–¥–∂ —Ç—Ä—ë—Ö –¥–µ–ª:
‚úÖ –°–ø–æ—Ä—Ç
‚úÖ –£—á—ë–±–∞  
‚úÖ –†–∞–±–æ—Ç–∞

–ö–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å
/new_challenge - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂
/today - –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/remind - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É –¥—Ä—É–≥—É
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —á–µ–ª–ª–µ–Ω–¥–∂! –ò—Å–ø–æ–ª—å–∑—É–π /new_challenge
    """
    
    await update.message.reply_text(welcome_text)

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞
async def new_challenge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data="challenge_7")],
        [InlineKeyboardButton("21 –¥–µ–Ω—å", callback_data="challenge_21")],
        [InlineKeyboardButton("30 –¥–Ω–µ–π", callback_data="challenge_30")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂–∞:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
async def challenge_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    days = int(data.split('_')[1])
    
    conn = sqlite3.connect('challenge.db')
    cursor = conn.cursor()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('''
        UPDATE users 
        SET challenge_days = ?, current_day = 1, start_date = ?
        WHERE user_id = ?
    ''', (days, datetime.now().isoformat(), user_id))
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    today = datetime.now().strftime('%Y-%m-%d')
    cursor.execute('''
        INSERT OR REPLACE INTO progress (user_id, date, sport, study, work)
        VALUES (?, ?, 0, 0, 0)
    ''', (user_id, today))
    
    conn.commit()
    conn.close()
    
    await query.edit_message_text(
        f"üéâ –û—Ç–ª–∏—á–Ω–æ! –ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–∞ {days} –¥–Ω–µ–π –Ω–∞—á–∞—Ç!\n\n"
        f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n"
        f"üèÉ –°–ø–æ—Ä—Ç\n"
        f"üìö –£—á—ë–±–∞\n"
        f"üíº –†–∞–±–æ—Ç–∞\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π /today —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á!"
    )

# –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
async def show_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    today = datetime.now().strftime('%Y-%m-%d')
    
    conn = sqlite3.connect('challenge.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
    cursor.execute('''
        SELECT u.current_day, u.challenge_days, p.sport, p.study, p.work 
        FROM users u 
        LEFT JOIN progress p ON u.user_id = p.user_id AND p.date = ?
        WHERE u.user_id = ?
    ''', (today, user_id))
    
    result = cursor.fetchone()
    conn.close()
    
    if not result:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π —á–µ–ª–ª–µ–Ω–¥–∂ –∫–æ–º–∞–Ω–¥–æ–π /new_challenge")
        return
    
    current_day, total_days, sport, study, work = result
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–¥–∞—á
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –°–ø–æ—Ä—Ç" if sport else "üèÉ –°–ø–æ—Ä—Ç", callback_data="toggle_sport"),
            InlineKeyboardButton("‚úÖ –£—á—ë–±–∞" if study else "üìö –£—á—ë–±–∞", callback_data="toggle_study"),
        ],
        [
            InlineKeyboardButton("‚úÖ –†–∞–±–æ—Ç–∞" if work else "üíº –†–∞–±–æ—Ç–∞", callback_data="toggle_work"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    progress_text = f"–î–µ–Ω—å {current_day} –∏–∑ {total_days}\n\n"
    progress_text += f"üèÉ –°–ø–æ—Ä—Ç: {'‚úÖ' if sport else '‚ùå'}\n"
    progress_text += f"üìö –£—á—ë–±–∞: {'‚úÖ' if study else '‚ùå'}\n"
    progress_text += f"üíº –†–∞–±–æ—Ç–∞: {'‚úÖ' if work else '‚ùå'}\n"
    
    if sport and study and work:
        progress_text += "\nüéâ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
    
    await update.message.reply_text(progress_text, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–¥–∞—á
async def task_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    task_type = query.data
    today = datetime.now().strftime('%Y-%m-%d')
    
    conn = sqlite3.connect('challenge.db')
    cursor = conn.cursor()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–µ –ø–æ–ª–µ –æ–±–Ω–æ–≤–ª—è—Ç—å
    field = task_type.split('_')[1]  # sport, study, work
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    cursor.execute(f'''
        SELECT {field} FROM progress 
        WHERE user_id = ? AND date = ?
    ''', (user_id, today))
    
    result = cursor.fetchone()
    current_value = 0
    if result:
        current_value = result[0]
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    new_value = 1 if current_value == 0 else 0
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
    if result:
        cursor.execute(f'''
            UPDATE progress SET {field} = ? 
            WHERE user_id = ? AND date = ?
        ''', (new_value, user_id, today))
    else:
        cursor.execute('''
            INSERT INTO progress (user_id, date, sport, study, work)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, today, 
              1 if field == 'sport' else 0,
              1 if field == 'study' else 0, 
              1 if field == 'work' else 0))
    
    conn.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    cursor.execute('''
        SELECT sport, study, work FROM progress 
        WHERE user_id = ? AND date = ?
    ''', (user_id, today))
    
    result = cursor.fetchone()
    if result:
        sport, study, work = result
    else:
        sport, study, work = 0, 0, 0
        
    conn.close()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –°–ø–æ—Ä—Ç" if sport else "üèÉ –°–ø–æ—Ä—Ç", callback_data="toggle_sport"),
            InlineKeyboardButton("‚úÖ –£—á—ë–±–∞" if study else "üìö –£—á—ë–±–∞", callback_data="toggle_study"),
        ],
        [
            InlineKeyboardButton("‚úÖ –†–∞–±–æ—Ç–∞" if work else "üíº –†–∞–±–æ—Ç–∞", callback_data="toggle_work"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –¥–Ω—è
    conn = sqlite3.connect('challenge.db')
    cursor = conn.cursor()
    cursor.execute('SELECT current_day, challenge_days FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    if result:
        current_day, total_days = result
    else:
        current_day, total_days = 1, 21
    conn.close()
    
    progress_text = f"–î–µ–Ω—å {current_day} –∏–∑ {total_days}\n\n"
    progress_text += f"üèÉ –°–ø–æ—Ä—Ç: {'‚úÖ' if sport else '‚ùå'}\n"
    progress_text += f"üìö –£—á—ë–±–∞: {'‚úÖ' if study else '‚ùå'}\n"
    progress_text += f"üíº –†–∞–±–æ—Ç–∞: {'‚úÖ' if work else '‚ùå'}\n"
    
    if sport and study and work:
        progress_text += "\nüéâ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
    
    await query.edit_message_text(progress_text, reply_markup=reply_markup)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    conn = sqlite3.connect('challenge.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    cursor.execute('''
        SELECT 
            COUNT(*) as total_days,
            SUM(sport + study + work) as total_tasks,
            SUM(CASE WHEN sport = 1 AND study = 1 AND work = 1 THEN 1 ELSE 0 END) as perfect_days
        FROM progress 
        WHERE user_id = ?
    ''', (user_id,))
    
    stats = cursor.fetchone()
    conn.close()
    
    if stats and stats[0] > 0:
        total_days, total_tasks, perfect_days = stats
        avg_tasks = total_tasks / total_days if total_days > 0 else 0
        
        stats_text = f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        stats_text += f"–í—Å–µ–≥–æ –¥–Ω–µ–π: {total_days}\n"
        stats_text += f"–ò–¥–µ–∞–ª—å–Ω—ã—Ö –¥–Ω–µ–π: {perfect_days}\n"
        stats_text += f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {total_tasks}\n"
        stats_text += f"–°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {avg_tasks:.1f}\n"
        stats_text += f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(perfect_days/total_days*100):.1f}%"
    else:
        stats_text = "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ù–∞—á–Ω–∏ —á–µ–ª–ª–µ–Ω–¥–∂!"
    
    await update.message.reply_text(stats_text)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏
async def send_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    import random
    
    reminder_type = random.choice(['anytime', 'lunch', 'evening', 'late'])
    phrase = random.choice(PHRASES[reminder_type])
    
    await update.message.reply_text(
        f"üì® –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –¥–ª—è –¥—Ä—É–≥–∞:\n\n\"{phrase}\"\n\n"
        f"–°–∫–æ–ø–∏—Ä—É–π –∏ –æ—Ç–ø—Ä–∞–≤—å –¥—Ä—É–≥—É!"
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("new_challenge", new_challenge))
    application.add_handler(CommandHandler("today", show_today))
    application.add_handler(CommandHandler("stats", show_stats))
    application.add_handler(CommandHandler("remind", send_reminder))
    
    application.add_handler(CallbackQueryHandler(challenge_callback, pattern="^challenge_"))
    application.add_handler(CallbackQueryHandler(task_callback, pattern="^toggle_"))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
